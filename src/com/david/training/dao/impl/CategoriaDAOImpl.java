package com.david.training.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.david.training.dao.CategoriaDAO;

import com.david.training.dao.util.JDBCUtils;
import com.david.training.exceptions.DataException;
import com.david.training.model.Categoria;

public class CategoriaDAOImpl implements CategoriaDAO{

	public static Logger logger = LogManager.getLogger(CategoriaDAOImpl.class);
	public CategoriaDAOImpl() {

	}

	public Categoria findById(Integer id, String idioma, Connection c)
			throws Exception {
		logger.debug("Id = {} Idioma = {}", id, idioma);
		Categoria ca = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StringBuilder sql = null;
		try {
			sql =  new StringBuilder("SELECT CA.ID_CATEGORIA, CI.NOMBRE_CATEGORIA "
					+"FROM CATEGORIA CA INNER JOIN CATEGORIA_IDIOMA CI ON CA.ID_CATEGORIA=CI.ID_CATEGORIA "
					+ "INNER JOIN IDIOMA I ON CI.ID_IDIOMA = I.ID_IDIOMA "
					+"WHERE CA.ID_CATEGORIA = ? "
					+ "AND I.ID_IDIOMA = ? ");

			preparedStatement = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			int i = 1;
			preparedStatement.setInt(i++, id);
			preparedStatement.setString(i++, idioma);
			resultSet = preparedStatement.executeQuery();

			if (resultSet.next()) {
				ca = loadNext(resultSet);
			} else {
				throw new Exception("No se encontró categoria"+id);			
			} 
			if (resultSet.next()) {
				
				throw new Exception("Categoria"+id+"duplicada");
			}
		} catch (SQLException ex) {
			logger.warn(ex.getMessage(), ex);
			throw new DataException(ex);
		} finally { 
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}
		return ca;
	}


	public Categoria create(Categoria ca, String idioma, Connection c)
			throws Exception {
		logger.debug("Categoria = {} Idioma = {}", ca, idioma);
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StringBuilder queryString = null;
		try {         
			queryString = new StringBuilder("INSERT INTO CATEGORIA(ID_CATEGORIA) "
					+ "VALUES (?); "
					+ "INSERT INTO CATEGORIA_IDIOMA(ID_CATEGORIA, ID_IDIOMA, NOMBRE_CATEGORIA) "
					+ "VALUES (?, ?, ?), (?, ?, ?) ");

			preparedStatement = c.prepareStatement(queryString.toString(), Statement.RETURN_GENERATED_KEYS);

			int i = 1;     			
			preparedStatement.setInt(i++, ca.getIdCategoria());
			preparedStatement.setInt(i++, ca.getIdCategoria());
			preparedStatement.setString(i++, idioma);
			preparedStatement.setString(i++, ca.getNombreCategoria());
			preparedStatement.setInt(i++, ca.getIdCategoria());
			preparedStatement.setString(i++, idioma);
			preparedStatement.setString(i++, ca.getNombreCategoria());


			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("Can not add row to table 'Categoria'");
			}

			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Integer idCategoria = resultSet.getInt(1);
				ca.setIdCategoria(idCategoria);				
			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}

			return ca;					

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(),ex);
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);			
		}

	}


	private Categoria loadNext(ResultSet resultSet) throws Exception {

		int i = 1;
		Integer idCategoria = resultSet.getInt(i++);
		String nombreCategoria = resultSet.getString(i++);

		Categoria ca = new Categoria();
		ca.setIdCategoria(idCategoria);
		ca.setNombreCategoria(nombreCategoria);

		return ca;
	}



	@Override
	public List<Categoria> findAll(String idioma, Connection c) throws Exception {
		
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StringBuilder sql = null;
		try {

			sql = new StringBuilder(
					  "SELECT ID_CATEGORIA, NOMBRE_CATEGORIA "
					+ "FROM CATEGORIA_IDIOMA "
					+ "WHERE ID_IDIOMA = ? ");

			preparedStatement = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			int i = 1;
			preparedStatement.setString(i++, idioma);
			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			List<Categoria> results = new ArrayList<Categoria>();                        
			Categoria a = null;

			while(resultSet.next()) {
				a = loadNext(resultSet);
				results.add(a);               	
			}

			return results;

		} catch (SQLException ex) {
			logger.warn(ex.getMessage(),ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}  	

	}



	@Override
	public List<Categoria> findByContenido(Integer idContenido, String idioma, Connection c) throws Exception {
		logger.debug("Id = {} Idioma = {}", idContenido, idioma);
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StringBuilder sql = null;
		try {
			sql = new StringBuilder("SELECT C.ID_CATEGORIA, CI.NOMBRE_CATEGORIA "
					+ "FROM CATEGORIA C INNER JOIN CATEGORIA_IDIOMA CI ON C.ID_CATEGORIA = CI.ID_CATEGORIA "
					+ "INNER JOIN CONTENIDO_CATEGORIA CC ON C.ID_CATEGORIA = CC.ID_CATEGORIA "
					+ "WHERE "
					+ "CC.ID_CONTENIDO = ? AND CI.ID_IDIOMA = ? ");
			preparedStatement = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			int i= 1;
			preparedStatement.setInt(i++, idContenido);
			preparedStatement.setString(i++,idioma);
			resultSet = preparedStatement.executeQuery();

			List<Categoria> categorias = new ArrayList<Categoria>();
			Categoria a = null;
			while (resultSet.next()) {
				a = loadNext(resultSet);
				categorias.add(a);
			} return categorias;
		} catch (SQLException ex) {
			logger.warn(ex.getMessage(),ex);
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		} 

	}

}
