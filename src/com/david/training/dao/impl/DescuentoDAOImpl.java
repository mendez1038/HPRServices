package com.david.training.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;

import com.david.training.dao.DescuentoDAO;
import com.david.training.dao.util.ConnectionManager;
import com.david.training.dao.util.JDBCUtils;
import com.david.training.exceptions.DataException;
import com.david.training.model.Descuento;

public class DescuentoDAOImpl implements DescuentoDAO{
	
	
	public DescuentoDAOImpl() {
		 
	}
	
	public Descuento findById(Integer id)
			throws Exception {

		Descuento d = null;
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		try{

			//metodo connectionmanager
			connection = ConnectionManager.getConnection();



			String sql;
			sql ="SELECT ID_DESCUENTO, PORCENTAJE, NOMBRE_OFERTA, FECHA_INICIO, FECHA_FIN "
					+"FROM DESCUENTO "
					+"WHERE ID_DESCUENTO = ? ";

			//STEP 4: Execute a query

			System.out.println("Creating statement...");
			preparedStatement = connection.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);


			// Establecer parametros
			int i = 1;
			preparedStatement.setInt(i++, id );
			resultSet = preparedStatement.executeQuery(); 

			//STEP 5: Extract data from result set	
			if (resultSet.next()) {
				d = loadNext(resultSet);
			} else {
				throw new Exception("Non se encontrou o dscuento "+id);
			}
			if (resultSet.next()) {
				throw new Exception("Descuento"+id+" duplicado");
			}
				
			
		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
			JDBCUtils.closeConnection(connection);
		}
		
		return d;
		
	}
	
	
	
	
	public Descuento create (Descuento d)
			throws Exception {
		
		Connection connection = null; 
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		
		try {          

			connection = ConnectionManager.getConnection();
			
			String sql = "INSERT INTO DESCUENTO(ID_DESCUENTO, PORCENTAJE, NOMBRE_OFERTA, FECHA_INICIO, FECHA_FIN )"
					+ "VALUES (?, ?, ?, ?, ?)";
			
			preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			int i = 1;
			
			
			preparedStatement.setInt(i++, d.getIdDescuento());
			preparedStatement.setInt(i++, d.getPorcentaje());
			preparedStatement.setString(i++, d.getNombreOferta());
			preparedStatement.setDate(i++, new java.sql.Date(d.getFechaInicio().getTime()));
			preparedStatement.setDate(i++, new java.sql.Date(d.getFechaFin().getTime()));
			
			int insertedRows = preparedStatement.executeUpdate();
			
			if (insertedRows == 0) {
				throw new SQLException("No se puede añadir fila a 'Descuento'");
			}
			
			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				 Integer idDescuento = resultSet.getInt(1);
				 d.setIdDescuento(idDescuento);				
			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}
			return d;
		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);			
			JDBCUtils.closeConnection(connection);
			
		}
		
		
	}
	
	
	
	
	private Descuento loadNext(ResultSet resultSet) throws Exception {
		Descuento d = new Descuento();
		int i = 1;
		
		Integer porcentaje = resultSet.getInt(i++);
		String nombreOferta = resultSet.getString(i++);
		Date fechaInicio = resultSet.getDate(i++);
		Date fechaFin = resultSet.getDate(i++);

		d = new Descuento();
		
		
		d.setPorcentaje(porcentaje);
		d.setNombreOferta(nombreOferta);
		d.setFechaInicio(fechaInicio);
		d.setFechaFin(fechaFin);
		
		
		return d;
	}

}
