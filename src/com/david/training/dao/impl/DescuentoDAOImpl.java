package com.david.training.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.david.training.dao.DescuentoDAO;
import com.david.training.dao.util.ConnectionManager;
import com.david.training.dao.util.JDBCUtils;
import com.david.training.exceptions.DataException;
import com.david.training.model.Descuento;


public class DescuentoDAOImpl implements DescuentoDAO{


	public DescuentoDAOImpl() {

	}

	public Descuento findById(Integer id, String idioma, Connection c)
			throws Exception {

		Descuento d = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StringBuilder sql = null;
		try{

			sql = new StringBuilder("SELECT D.ID_DESCUENTO, D.PORCENTAJE, DI.NOMBRE_OFERTA, D.FECHA_INICIO, D.FECHA_FIN "
					+"FROM DESCUENTO D INNER JOIN DESCUENTO_IDIOMA DI ON DI.ID_DESCUENTO=D.ID_DESCUENTO "
					+ "INNER JOIN IDIOMA I ON DI.ID_IDIOMA = I.ID_IDIOMA "
					+"WHERE D.ID_DESCUENTO = ? AND I.ID_IDIOMA = ? ");

			//STEP 4: Execute a query

			System.out.println("Creating statement...");
			preparedStatement = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
			// Establecer parametros
			int i = 1;
			preparedStatement.setInt(i++, id );
			preparedStatement.setString(i++, idioma);
			resultSet = preparedStatement.executeQuery(); 

			//STEP 5: Extract data from result set	
			if (resultSet.next()) {
				d = loadNext(resultSet);
			} else {
				throw new Exception("Non se encontrou o descuento "+id);
			}
			if (resultSet.next()) {
				throw new Exception("Descuento"+id+" duplicado");
			}
		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}
		return d;
	}




	public Descuento create (Descuento d)
			throws Exception {

		Connection connection = null; 
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StringBuilder sql = null;
		try {          

			connection = ConnectionManager.getConnection();

			sql = new StringBuilder("INSERT INTO DESCUENTO(PORCENTAJE, NOMBRE_OFERTA, FECHA_INICIO, FECHA_FIN )"
					+ "VALUES (?, ?, ?, ?)");

			preparedStatement = connection.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);
			int i = 1;

			preparedStatement.setInt(i++, d.getPorcentaje());
			preparedStatement.setString(i++, d.getNombreOferta());
			preparedStatement.setDate(i++, new java.sql.Date(d.getFechaInicio().getTime()));
			preparedStatement.setDate(i++, new java.sql.Date(d.getFechaFin().getTime()));

			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) {
				throw new SQLException("No se puede añadir fila a 'Descuento'");
			}

			resultSet = preparedStatement.getGeneratedKeys();
			if (resultSet.next()) {
				Integer idDescuento = resultSet.getInt(1);
				d.setIdDescuento(idDescuento);				
			} else {
				throw new DataException("Unable to fetch autogenerated primary key");
			}
			return d;
		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);			
			JDBCUtils.closeConnection(connection);

		}
	}


	private Descuento loadNext(ResultSet resultSet) throws Exception {
		Descuento d = new Descuento();
		int i = 1;

		Integer idDescuento = resultSet.getInt(i++);
		Integer porcentaje = resultSet.getInt(i++);
		String nombreOferta = resultSet.getString(i++);
		Date fechaInicio = resultSet.getDate(i++);
		Date fechaFin = resultSet.getDate(i++);

		d = new Descuento();

		d.setIdDescuento(idDescuento);
		d.setPorcentaje(porcentaje);
		d.setNombreOferta(nombreOferta);
		d.setFechaInicio(fechaInicio);
		d.setFechaFin(fechaFin);

		return d;
	}


	public long delete(Integer id) throws Exception {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		StringBuilder queryString = null;

		try {
			connection = ConnectionManager.getConnection();

			queryString = new StringBuilder("DELETE FROM DESCUENTO "
					+ "WHERE ID_DESCUENTO = ? ");

			preparedStatement = connection.prepareStatement(queryString.toString());

			int i =1;
			preparedStatement.setInt(i++, id);

			long removedRows = preparedStatement.executeUpdate(); 

			return removedRows;

		} catch (SQLException e) {
			throw new DataException(e);
		} finally {
			JDBCUtils.closeStatement(preparedStatement);
			JDBCUtils.closeConnection(connection);
		}
	}


	public boolean update(Descuento d) throws Exception {

		Connection connection = null; 
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StringBuilder queryString = null;
		try {          

			connection = ConnectionManager.getConnection();
			queryString = new StringBuilder(
					"UPDATE DESCUENTO "
							+ "SET PORCENTAJE = ?, "
							+ "SET NOMBRE_OFERTA = ?, "
							+ "SET FECHA_INICIO = ?, "
							+ "SET FECHA_FIN = ? "
							+ "WHERE ID_DESCUENTO = ? ");

			preparedStatement = connection.prepareStatement(queryString.toString());

			int i = 1;     			
			preparedStatement.setInt(i++, d.getPorcentaje());
			preparedStatement.setString(i++, d.getNombreOferta());
			preparedStatement.setDate(i++, new java.sql.Date(d.getFechaInicio().getTime()));
			preparedStatement.setDate(i++, new java.sql.Date(d.getFechaFin().getTime()));


			int insertedRows = preparedStatement.executeUpdate();

			if (insertedRows == 0) 
			{

				throw new SQLException("No se pudo actualizar la tabla 'DESCUENTO'");

			} 
			else { return true;}

			//...


		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);			
			JDBCUtils.closeConnection(connection);
		}
	}


	public List<Descuento> findAll() throws Exception {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StringBuilder sql = null;
		try {
			connection = ConnectionManager.getConnection();

			sql = new StringBuilder(
					"SELECT ID_DESCUENTO, PORCENTAJE, NOMBRE_OFERTA,  FECHA_INICIO, FECHA_FIN "
							+"FROM DESCUENTO ");

			// Preparar a query
			System.out.println("Creating statement...");
			preparedStatement = connection.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			resultSet = preparedStatement.executeQuery();			
			//STEP 5: Extract data from result set			

			List<Descuento> results = new ArrayList<Descuento>();                        
			Descuento d = null;


			while(resultSet.next()) {
				d = loadNext(resultSet);
				results.add(d);               	
			}

			return results;

		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {            
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
			JDBCUtils.closeConnection(connection);
		}  	
	}

	@Override
	public List<Descuento> findByPorcentaje(Integer porcentaje, String idioma, Connection c) 
			throws Exception {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		StringBuilder sql = null;
		try {
			sql = new StringBuilder(
					"SELECT D.ID_DESCUENTO, D.PORCENTAJE, DI.NOMBRE_OFERTA,  D.FECHA_INICIO, D.FECHA_FIN "
					+"FROM DESCUENTO D INNER JOIN DESCUENTO_IDIOMA DI ON D.ID_DESCUENTO = DI.ID_DESCUENTO "
					+ "WHERE D.PORCENTAJE = ? AND DI.ID_IDIOMA = ? ");
			System.out.println("Creating statement...");

			preparedStatement = c.prepareStatement(sql.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);

			
			int i = 1;
			preparedStatement.setInt(i++, porcentaje );
			preparedStatement.setString(i++, idioma);
			resultSet = preparedStatement.executeQuery(); 			
			//STEP 5: Extract data from result set			

			List<Descuento> results = new ArrayList<Descuento>();                        
			Descuento d = null;


			while(resultSet.next()) {
				d = loadNext(resultSet);
				results.add(d);               	

			} 
			return results;
		} catch (SQLException ex) {
			throw new DataException(ex);
		} finally {
			JDBCUtils.closeResultSet(resultSet);
			JDBCUtils.closeStatement(preparedStatement);
		}

	}

}


